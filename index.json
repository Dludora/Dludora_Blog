[{"content":"Http协议 Http协议是Hyper Text Transfer Protocol(超文本传输协议)的缩写，是从万维网www服务器传输超文本到本地浏览器的传输协议\nHTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\nHTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。\nHTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n主要特点 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 支持B/S及C/S模式。 URL HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息\nURL,全称是Uniform Resource Locator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：\nhttp://www.aspxfans.com:8080/news/index.asp?boardID=5\u0026amp;ID=24618\u0026amp;page=1#name 从上面的URL可以看出，一个完整的URL包括以下几部分： 协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在\u0026quot;HTTP\u0026quot;后面的“//”为分隔符\n域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用 端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口 虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/” 文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名 锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分 参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5\u0026amp;ID=24618\u0026amp;page=1”。参数可以允许有多个参数，参数与参数之间用“\u0026amp;”作为分隔符。 URI和URL URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。 Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的\nURI一般由三部组成：\n访问资源的命名机制 存放资源的主机名 资源自身的名称，由路径表示，着重强调于资源。 URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。 URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。\n采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：\n协议(或称为服务方式)\n存有该资源的主机IP地址(有时也包括端口号)\n主机资源的具体地址。如目录和文件名等\nHTTP之请求消息Request 客户端发送一个HTTP请求到服务器的请求消息包括以下格式：\n请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。 GET /562f25980001b1b106000338.jpg HTTP/1.1 Host img.mukewang.com User-Agent Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36 Accept image/webp,image/*,*/*;q=0.8 Referer http://www.imooc.com/ Accept-Encoding gzip, deflate, sdch Accept-Language zh-CN,zh;q=0.8 第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本. GET说明请求类型为GET,/562f25980001b1b106000338.jpg为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。\n第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息 从第二行起为请求头部，HOST将指出请求的目的地.User-Agent: 服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等\n第三部分：空行，请求头部后面的空行是必须的 即使第四部分的请求数据为空，也必须有空行。\n第四部分：请求数据也叫主体，可以添加任意的其他数据。 这个例子的请求数据为空。\nPOST请求例子，使用Charles抓取的request： POST / HTTP1.1 Host:www.wrox.com User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022) Content-Type:application/x-www-form-urlencoded Content-Length:40 Connection: Keep-Alive name=Professional%20Ajax\u0026amp;publisher=Wiley 第一部分：请求行，第一行明了是post请求，以及http1.1版本。 第二部分：请求头部，第二行至第六行。 第三部分：空行，第七行的空行。 第四部分：请求数据，第八行。 HTTP之响应消息Response 一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。\nHTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。 例子\nHTTP/1.1 200 OK Date: Fri, 22 May 2009 06:07:21 GMT Content-Type: text/html; charset=UTF-8 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--body goes here--\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。 第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）\n第二部分：消息报头，用来说明客户端要使用的一些附加信息 第二行和第三行为消息报头， Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8\n第三部分：空行，消息报头后面的空行是必须的 第四部分：响应正文，服务器返回给客户端的文本信息。 空行后面的html部分为响应正文。\nHTTP之状态码 状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:\n1xx：指示信息\u0026ndash;表示请求已接收，继续处理 2xx：成功\u0026ndash;表示请求已被成功接收、理解、接受 3xx：重定向\u0026ndash;要完成请求必须进行更进一步的操作 4xx：客户端错误\u0026ndash;请求有语法错误或请求无法实现 5xx：服务器端错误\u0026ndash;服务器未能实现合法的请求 常见状态码：\n200 OK //客户端请求成功 400 Bad Request //客户端请求有语法错误，不能被服务器所理解 401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 403 Forbidden //服务器收到请求，但是拒绝提供服务 404 Not Found //请求资源不存在，eg：输入了错误的URL 500 Internal Server Error //服务器发生不可预期的错误 503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常 HTTP请求方法 根据HTTP标准，HTTP请求可以使用多种请求方法。 HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。 HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\nGET 请求指定的页面信息，并返回实体主体。 HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 PUT 从客户端向服务器传送的数据取代指定的文档的内容。 DELETE 请求服务器删除指定的页面。 CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。 OPTIONS 允许客户端查看服务器的性能。 TRACE 回显服务器收到的请求，主要用于测试或诊断。 HTTP工作原理 HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。\n以下是 HTTP 请求/响应的步骤：\n1、客户端连接到Web服务器 一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，http://www.oakcms.cn。\n2、发送HTTP请求 通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。\n3、服务器接受请求并返回HTTP响应 Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。\n4、释放连接TCP连接 若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;\n5、客户端浏览器解析HTML内容 客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。\n例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：\n1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;\n2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;\n3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;\n4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;\n5、释放 TCP连接;\n6、浏览器将该 html 文本并显示内容; GET和POST请求的区别 GET请求 GET /books/?sex=man\u0026amp;name=Professional HTTP/1.1 Host: www.wrox.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6) Gecko/20050225 Firefox/1.0.1 Connection: Keep-Alive 注意最后一行是空行\nPOST请求 POST / HTTP/1.1 Host: www.wrox.com User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6) Gecko/20050225 Firefox/1.0.1 Content-Type: application/x-www-form-urlencoded Content-Length: 40 Connection: Keep-Alive name=Professional%20Ajax\u0026amp;publisher=Wiley 1、GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用\u0026amp;连接；例 如：login.action?name=hyddd\u0026amp;password=idontknow\u0026amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。\nPOST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据\n因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变 2、传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。\n而在实际开发中存在的限制主要有：\nGET:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。\n因此对于GET提交时，传输数据就会受到URL长度的 限制。\nPOST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。\n3、安全性\nPOST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击\n4、Http get,post,soap协议都是在http上运行的\n（1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的 查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全\n（2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form- urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。 但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。\n（3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式 Content-type设置为: text/xml 任何数据都可以xml化。\nHttp协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.\n我们看看GET和POST的区别\nGET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以\u0026amp;相连，如EditPosts.aspx?name=test1\u0026amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中. GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制. GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。 GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码. ","permalink":"https://Dludora.github.io/Dludora_Blog/frontend/http%E5%8D%8F%E8%AE%AE/","summary":"Http协议 Http协议是Hyper Text Transfer Protocol(超文本传输协议)的缩写，是从万维网www服务器传输超文本到本地浏览器的传输协议\nHTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\nHTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。\nHTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n主要特点 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。 无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 支持B/S及C/S模式。 URL HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息\nURL,全称是Uniform Resource Locator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：\nhttp://www.aspxfans.com:8080/news/index.asp?boardID=5\u0026amp;ID=24618\u0026amp;page=1#name 从上面的URL可以看出，一个完整的URL包括以下几部分： 协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在\u0026quot;HTTP\u0026quot;后面的“//”为分隔符\n域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用 端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口 虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/” 文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名 锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分 参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5\u0026amp;ID=24618\u0026amp;page=1”。参数可以允许有多个参数，参数与参数之间用“\u0026amp;”作为分隔符。 URI和URL URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。 Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的\nURI一般由三部组成：\n访问资源的命名机制 存放资源的主机名 资源自身的名称，由路径表示，着重强调于资源。 URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。 URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。\n采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：\n协议(或称为服务方式)\n存有该资源的主机IP地址(有时也包括端口号)\n主机资源的具体地址。如目录和文件名等\nHTTP之请求消息Request 客户端发送一个HTTP请求到服务器的请求消息包括以下格式：\n请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。 GET /562f25980001b1b106000338.jpg HTTP/1.1 Host img.mukewang.com User-Agent Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.","title":"Http协议"},{"content":"","permalink":"https://Dludora.github.io/Dludora_Blog/java/%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F/","summary":"","title":"多用户即时通信系统"},{"content":"网络多线程 一、网络 1、相关概念 1.1 ip地址： 概念：用于唯一标识网络中的每台计算机/主机。 查看ip地址：ipconfig ip地址的表示形式：点分十进制 xx.xx.xx.xx 每一个ip地址的组成=网络地址+主机地址，如：192.168.16.69 IPV4：4个字节，IPV6：16个字节 ![image-20220701165216171](D:\\My Blog\\Dludora_Blog\\content\\Java\\image-20220701165216171.png)\n1.2 域名 把ip地址映射成域名，ping 域名来获取对应ip\n二、Socket 通信的两端都要有Socket，是两台机器间通信的端点 网络通信其实就是Socket间的通信 Socket允许程序把网络连接党曾一个流，数据在两个Socket之间通过IO传输。 一般主动发起通信的应用程序是客户端，等待通信请求的是服务端。 ![image-20220701171039264](D:\\My Blog\\Dludora_Blog\\content\\Java\\image-20220701171039264.png)\n![image-20220701171246279](D:\\My Blog\\Dludora_Blog\\content\\Java\\image-20220701171246279.png)\n![image-20220701202741081](D:\\My Blog\\Dludora_Blog\\content\\Java\\image-20220701202741081.png)\n","permalink":"https://Dludora.github.io/Dludora_Blog/java/socket/","summary":"网络多线程 一、网络 1、相关概念 1.1 ip地址： 概念：用于唯一标识网络中的每台计算机/主机。 查看ip地址：ipconfig ip地址的表示形式：点分十进制 xx.xx.xx.xx 每一个ip地址的组成=网络地址+主机地址，如：192.168.16.69 IPV4：4个字节，IPV6：16个字节 ![image-20220701165216171](D:\\My Blog\\Dludora_Blog\\content\\Java\\image-20220701165216171.png)\n1.2 域名 把ip地址映射成域名，ping 域名来获取对应ip\n二、Socket 通信的两端都要有Socket，是两台机器间通信的端点 网络通信其实就是Socket间的通信 Socket允许程序把网络连接党曾一个流，数据在两个Socket之间通过IO传输。 一般主动发起通信的应用程序是客户端，等待通信请求的是服务端。 ![image-20220701171039264](D:\\My Blog\\Dludora_Blog\\content\\Java\\image-20220701171039264.png)\n![image-20220701171246279](D:\\My Blog\\Dludora_Blog\\content\\Java\\image-20220701171246279.png)\n![image-20220701202741081](D:\\My Blog\\Dludora_Blog\\content\\Java\\image-20220701202741081.png)","title":"Socket"},{"content":"多线程 程序：我们写的代码 进程：运行中的程序，是程序的一个执行过程 一、继承Thread类（重写 run 方法） ​\t当一个类继承了Thread类，该类就可以当作线程使用。我们会重写run方法，写上自己的业务代码。run Thread类实现了Runnable接口中的run方法。通过start方法启动线程。\n​\t使用JConsole监控线程执行情况，并画出程序示意图。(命令行输入jconsole)\npublic class Thread01 { public static void main(String[] args) throws InterruptedException { // 创建Cat对象，可以当作线程使用 Cat cat = new Cat(); cat.start(); // 启动线程-\u0026gt;最终会执行cat的run方法 // 当main线程启动一个子线程Thread-0，主线程不会阻塞，会继续执行 System.out.println(\u0026#34;主线程继续执行\u0026#34; + Thread.currentThread().getName()); for (int i = 0; i \u0026lt; 10; i++) { System.out.println(\u0026#34;主线程 i = \u0026#34;+ i); // 让主线程休眠 Thread.sleep(1000); } } } class Cat extends Thread { int times = 0; @Override public void run() { while (true) { // 该线程每隔一秒，在控制台输出\u0026#34;喵喵，我是小猫咪\u0026#34; System.out.println(\u0026#34;喵喵，我是小猫咪\u0026#34; + (++times) + \u0026#34; 线程名=\u0026#34; + Thread.currentThread().getName()); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } if (times == 8) { break; } } } } 二、实现Runnable接口 说明\nJava是单继承的，在某些情况下一个类可能已经继承了某个父类，这时无法再继承Thread类方法来创建进程。 可以通过实现Runnable接口来创建线程 public class Thread02 { public static void main(String[] args) { Dog dog = new Dog(); // 这里不能直接 调用start()方法 Thread thread = new Thread(dog); thread.start(); } } class Dog implements Runnable { int count = 0; @Override public void run() { while (true) { System.out.println(\u0026#34;小狗汪汪叫..hi\u0026#34; + (++count) + Thread.currentThread().getName()); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } } 三、线程方法 setName、getName、start、run、setPriority、getPriority、sleep、interrupt\n1、线程礼让（yield） ​\t让出CPU，让其他线程执行，但礼让的时间不确定，也不一定礼让成功（资源充足时）。\n2、线程插队（join） 插队的线程一旦插队成功，则肯定先执行完插入的线程的所有任务。\npackage threaduse; public class Thread03 { public static void main(String[] args) { T1 t1 = new T1(); t1.start(); for (int i = 1; i \u0026lt;= 20; i++) { try { Thread.sleep(1000); System.out.println(\u0026#34;主线程 吃了\u0026#34; + i + \u0026#34; 个包子\u0026#34;); if (i == 5) { System.out.println(\u0026#34;主线程让 子线程 先全部吃完\u0026#34;); t1.join(); // 相当于让t2线程先执行完毕。 System.out.println(\u0026#34;子线程 全部吃完，主线程接着吃\u0026#34;); } } catch (InterruptedException e) { e.printStackTrace(); } } } } class T1 extends Thread { @Override public void run() { for (int i = 1; i \u0026lt;= 20; i++) { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\u0026#34;子线程 吃了\u0026#34; + i + \u0026#34; 个包子\u0026#34;); } } } 3、用户线程和守护线程 用户线程：也叫哦工作线程，当线程的任务执行完或通知方式结束 守护线程：一般是为工作线程服务，当所有用户线程结束，守护线程自动结束 常见守护线程：垃圾回收机制。 设置某一线程为守护线程，在线程开始之前执行语句：Thread.setDaemon(true)\n四、锁 解决超卖问题\n1、线程同步机制 在多线程编程，一些敏感数据不允许被多个线程同时访问，使用同步访问计数，保证数据在任何同一时刻，最多有一个线程访问，保证数据的完整性。 当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，知道该线程完成操作。 2、同步方法 2.1 同步 synchronized(对象) {\t// 得到对象的锁 // 需要被同步的代码 } public synchronized void m(String name) { // 需要被同步的代码 } 2.2 互斥锁 ","permalink":"https://Dludora.github.io/Dludora_Blog/java/thread/","summary":"多线程 程序：我们写的代码 进程：运行中的程序，是程序的一个执行过程 一、继承Thread类（重写 run 方法） ​\t当一个类继承了Thread类，该类就可以当作线程使用。我们会重写run方法，写上自己的业务代码。run Thread类实现了Runnable接口中的run方法。通过start方法启动线程。\n​\t使用JConsole监控线程执行情况，并画出程序示意图。(命令行输入jconsole)\npublic class Thread01 { public static void main(String[] args) throws InterruptedException { // 创建Cat对象，可以当作线程使用 Cat cat = new Cat(); cat.start(); // 启动线程-\u0026gt;最终会执行cat的run方法 // 当main线程启动一个子线程Thread-0，主线程不会阻塞，会继续执行 System.out.println(\u0026#34;主线程继续执行\u0026#34; + Thread.currentThread().getName()); for (int i = 0; i \u0026lt; 10; i++) { System.out.println(\u0026#34;主线程 i = \u0026#34;+ i); // 让主线程休眠 Thread.sleep(1000); } } } class Cat extends Thread { int times = 0; @Override public void run() { while (true) { // 该线程每隔一秒，在控制台输出\u0026#34;喵喵，我是小猫咪\u0026#34; System.","title":"多线程"},{"content":"Java IO 流 一、文件操作 1、创建文件 new File(String pathname)\t根据路径构建一个File对象\nnew File(File parent, String child)\t根据父目录文件+子路径构造\nnew File(String parent, String child)\t根据父目录+子路径构建\n创建文件对象后,执行 file.createNewFile\n2、获取文件信息 file.getName()文件名字\nfile.getAbsolutePath()文件绝对路径\nfile.getParent文件父级目录\nfile.length()文件大小(字节)\nfile.exists() 文件/目录是否存在\nfile.isFile()是否是文件\nfile.isDirectory()是否是目录\n3、目录操作 file.delete()\t删除文件/目录\nfile.mkdir()\t创建一级目录\nfile.mkdirs()\t创建多级目录\n二、Java IO流原理及其分类 ​\tI/O是input/output的缩写，按照操作数据单位不同分为字节流，字符流。字节流操作二进制文件时更加适合，字符流操作文本文件更加适合。按照流的角色分为节点流、处理流/包装流。\n​\tIO流使用完毕后必须关闭!\n抽象基类 字节流 字符流 输入流 InputStream Reader 输出流 OutputStream Writer 节点流是从某一个特定的数据源读写数据，如FileReader、FileWriter。处理流是包装节点流，可以消除不同节点流的实现差异，以更加方便的方法实现输入输出，使用了修饰器设计模式，不会直接与数据源相连，如BufferedReader、BufferedWriter。\n1、InputStream 1.1 BufferedInputStream\t缓冲字节流 1.2 FileInputStream\t文件字节流 构造方法：\nFIleInputStream(File file) FIleInputStream(String filePath) FIleInputStream(FileDescription fdObj) 方法\nint read(byte[] b)读取一个字节的数据，返回实际读取的字节数。若达到文件末尾，返回-1。如果在其中加入byte[] b，则一次获取最多b.length字节的数据到字节数组。 可以把byte数组转成字符串new String(b, 0, readLen) 1.3 ObjectInputStream\t对象字节流 需求\n将int num = 100这个int数据保存到文件中，且能从文件中直接回复int 100 将Dog dog = new Dog(\u0026quot;小黄\u0026quot;, 3)这个dog对象保存到文件中，并且能从文件恢复 能够将基本数据类型或者对象进行序列化和反序列化操作 2、OutputStream 2.1 FileOutputStream FileOutputStream(filePath, append) 如果append是true而不是false时，以追加而不是覆盖的方式写入文件。\nwrite(byte[] b, off, len)会覆盖之前的文件，可以通过string.getBytes()把字符串转换为字节数组，输出到对应文件。 3 Reader 3.1 FileReader 与FileInputStream类似，读取单位变为字符。\n3.2 BufferedReader 构造\nBufferedReader(Reader in)\t使用默认的缓冲区大小8192个字符来创建缓冲字符输入流 BufferedReader(Reader in, int sz)\t指定缓冲区大小 方法\nfill()\t从底层输入流中填充字符到缓冲区中 string = readLine() 读取一行字符串 read(c[], off, len)将最多len个字符读入数组中，返回实际读入的字符个数，督导文件末尾时返回-1 4 Writer 4.1 BufferedWriter 构造\nBufferedRWriter(Reader out)\t使用默认的缓冲区大小8192个字符来创建缓冲字符输入流 BufferedWriter(Readered out, int sz)\t指定缓冲区大小 方法\nwrite(char c[], off, len) write(int c) write(String s, off, len) close() newLine() 写入一个行分隔符 flush() 刷新该流的缓冲 4.2 ObjectWriter 三、Properties类 需求\n如下一个配置文件mysql.properties,通过编程获取ip，user，pwd\nip=192.168.0.13 user=root pwd=12345 方法\nload(Reader reader) 加载配置文件的键值对到Properties对象 list(PrintStream out)将数据显示到指定设备 getProperty(key)根据键获取值 setProperty(key, value)设置键值对到Properties对象 store(Writer writer, String Comments)将Properties中的键值对存储到配置文件 ","permalink":"https://Dludora.github.io/Dludora_Blog/java/io/","summary":"Java IO 流 一、文件操作 1、创建文件 new File(String pathname)\t根据路径构建一个File对象\nnew File(File parent, String child)\t根据父目录文件+子路径构造\nnew File(String parent, String child)\t根据父目录+子路径构建\n创建文件对象后,执行 file.createNewFile\n2、获取文件信息 file.getName()文件名字\nfile.getAbsolutePath()文件绝对路径\nfile.getParent文件父级目录\nfile.length()文件大小(字节)\nfile.exists() 文件/目录是否存在\nfile.isFile()是否是文件\nfile.isDirectory()是否是目录\n3、目录操作 file.delete()\t删除文件/目录\nfile.mkdir()\t创建一级目录\nfile.mkdirs()\t创建多级目录\n二、Java IO流原理及其分类 ​\tI/O是input/output的缩写，按照操作数据单位不同分为字节流，字符流。字节流操作二进制文件时更加适合，字符流操作文本文件更加适合。按照流的角色分为节点流、处理流/包装流。\n​\tIO流使用完毕后必须关闭!\n抽象基类 字节流 字符流 输入流 InputStream Reader 输出流 OutputStream Writer 节点流是从某一个特定的数据源读写数据，如FileReader、FileWriter。处理流是包装节点流，可以消除不同节点流的实现差异，以更加方便的方法实现输入输出，使用了修饰器设计模式，不会直接与数据源相连，如BufferedReader、BufferedWriter。\n1、InputStream 1.1 BufferedInputStream\t缓冲字节流 1.2 FileInputStream\t文件字节流 构造方法：\nFIleInputStream(File file) FIleInputStream(String filePath) FIleInputStream(FileDescription fdObj) 方法","title":"Java IO流"},{"content":"Token 将token存储到store中，在store文件夹下新建user.js\n命令行输入npm i js-cookie\n","permalink":"https://Dludora.github.io/Dludora_Blog/softwareeg/my-third-post/","summary":"Token 将token存储到store中，在store文件夹下新建user.js\n命令行输入npm i js-cookie","title":"Vue解决登录问题"},{"content":"Vue 与 Markdown 交互 1. vue3 适配的 markdown编辑器 ​\t命令行输入npm i @kangc/v-md-editor@next -S安装 v-md-editor组件\n​\t在main.js中加入如下代码，即可通过v-md-editor模块进行使用markdown编辑器\n// 引入所有语言包 import hljs from \u0026#39;highlight.js\u0026#39; import VMdPreview from \u0026#39;@kangc/v-md-editor/lib/preview\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/style/preview.css\u0026#39;; import VMdEditor from \u0026#39;@kangc/v-md-editor/lib/codemirror-editor\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/style/codemirror-editor.css\u0026#39;; import githubTheme from \u0026#39;@kangc/v-md-editor/lib/theme/github.js\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/theme/style/github.css\u0026#39;; // emoji import createEmojiPlugin from \u0026#39;@kangc/v-md-editor/lib/plugins/emoji/index\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/plugins/emoji/emoji.css\u0026#39;; // 显示代码行数 import createLineNumbertPlugin from \u0026#39;@kangc/v-md-editor/lib/plugins/line-number/index\u0026#39;; // 快速复制 import createCopyCodePlugin from \u0026#39;@kangc/v-md-editor/lib/plugins/copy-code/index\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/plugins/copy-code/copy-code.css\u0026#39;; // codemirror 编辑器的相关资源 import Codemirror from \u0026#39;codemirror\u0026#39;; // mode import \u0026#39;codemirror/mode/markdown/markdown\u0026#39;; import \u0026#39;codemirror/mode/javascript/javascript\u0026#39;; import \u0026#39;codemirror/mode/css/css\u0026#39;; import \u0026#39;codemirror/mode/htmlmixed/htmlmixed\u0026#39;; import \u0026#39;codemirror/mode/vue/vue\u0026#39;; // edit import \u0026#39;codemirror/addon/edit/closebrackets\u0026#39;; import \u0026#39;codemirror/addon/edit/closetag\u0026#39;; import \u0026#39;codemirror/addon/edit/matchbrackets\u0026#39;; // placeholder import \u0026#39;codemirror/addon/display/placeholder\u0026#39;; // active-line import \u0026#39;codemirror/addon/selection/active-line\u0026#39;; // scrollbar import \u0026#39;codemirror/addon/scroll/simplescrollbars\u0026#39;; import \u0026#39;codemirror/addon/scroll/simplescrollbars.css\u0026#39;; // style import \u0026#39;codemirror/lib/codemirror.css\u0026#39;; VMdEditor.Codemirror = Codemirror; VMdEditor.use(githubTheme, { Hljs: hljs, }); VMdPreview.use(githubTheme, { Hljs: hljs, }); VMdPreview.use(createEmojiPlugin()); VMdPreview.use(createLineNumbertPlugin()); VMdPreview.use(createCopyCodePlugin()); app.use(VMdEditor); app.use(VMdPreview); 如果想要添加流程图功能\n在main.js中添加\n// 流程图 import createMermaidPlugin from \u0026#39;@kangc/v-md-editor/lib/plugins/mermaid/cdn\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/plugins/mermaid/mermaid.css\u0026#39;; VMdPreview.use(createMermaidPlugin()); 在index.html中添加\n\u0026lt;script src=\u0026#34;https://unpkg.com/mermaid/dist/mermaid.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 在想要引入的页面中加入\n\u0026lt;v-md-editor v-model=\u0026#34;xxx\u0026#34; height=\u0026#34;600px\u0026#34;\u0026gt;\u0026lt;/v-md-editor\u0026gt; 2. 渲染markdown文件 需要提前安装的包 npm install vue-loader vue-template-compiler -D\nnpm install --save vue-markdown\nnpm install github-markdown-css\nnpm install highlight.js\nnpm install markdown-loader\n预览器使用 \u0026lt;v-md-preview :text=\u0026#34;blogForm.text\u0026#34;\u0026gt;\u0026lt;/v-md-preview\u0026gt; ","permalink":"https://Dludora.github.io/Dludora_Blog/softwareeg/my-second-post/","summary":"Vue 与 Markdown 交互 1. vue3 适配的 markdown编辑器 ​\t命令行输入npm i @kangc/v-md-editor@next -S安装 v-md-editor组件\n​\t在main.js中加入如下代码，即可通过v-md-editor模块进行使用markdown编辑器\n// 引入所有语言包 import hljs from \u0026#39;highlight.js\u0026#39; import VMdPreview from \u0026#39;@kangc/v-md-editor/lib/preview\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/style/preview.css\u0026#39;; import VMdEditor from \u0026#39;@kangc/v-md-editor/lib/codemirror-editor\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/style/codemirror-editor.css\u0026#39;; import githubTheme from \u0026#39;@kangc/v-md-editor/lib/theme/github.js\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/theme/style/github.css\u0026#39;; // emoji import createEmojiPlugin from \u0026#39;@kangc/v-md-editor/lib/plugins/emoji/index\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/plugins/emoji/emoji.css\u0026#39;; // 显示代码行数 import createLineNumbertPlugin from \u0026#39;@kangc/v-md-editor/lib/plugins/line-number/index\u0026#39;; // 快速复制 import createCopyCodePlugin from \u0026#39;@kangc/v-md-editor/lib/plugins/copy-code/index\u0026#39;; import \u0026#39;@kangc/v-md-editor/lib/plugins/copy-code/copy-code.css\u0026#39;; // codemirror 编辑器的相关资源 import Codemirror from \u0026#39;codemirror\u0026#39;; // mode import \u0026#39;codemirror/mode/markdown/markdown\u0026#39;; import \u0026#39;codemirror/mode/javascript/javascript\u0026#39;; import \u0026#39;codemirror/mode/css/css\u0026#39;; import \u0026#39;codemirror/mode/htmlmixed/htmlmixed\u0026#39;; import \u0026#39;codemirror/mode/vue/vue\u0026#39;; // edit import \u0026#39;codemirror/addon/edit/closebrackets\u0026#39;; import \u0026#39;codemirror/addon/edit/closetag\u0026#39;; import \u0026#39;codemirror/addon/edit/matchbrackets\u0026#39;; // placeholder import \u0026#39;codemirror/addon/display/placeholder\u0026#39;; // active-line import \u0026#39;codemirror/addon/selection/active-line\u0026#39;; // scrollbar import \u0026#39;codemirror/addon/scroll/simplescrollbars\u0026#39;; import \u0026#39;codemirror/addon/scroll/simplescrollbars.","title":"Vue 与 Markdown 交互"},{"content":"Vue-Django解决跨域 什么是跨域 跨域本质是浏览器基于同源策略的一种安全手段\n同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能\n所谓同源（即指在同一个域）具有以下三个相同点\n协议相同（protocol） 主机相同（host） 端口相同（port） 反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域\n一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用postman请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。\n配置vue.config.js实现跨域 原理 ​\t将域名发送给本地的服务器(localhost:8080) ​\t再由本地的服务器去请求真正的服务器 ​\t因为请求是从服务器端发出的，所以就不存在跨域的问题 实现步骤 安装并引入axios 前端终端中输出 npm install axios -s安装axios\n在main.js中引入axios，在全局进行注册\nimport axios from \u0026#39;axios\u0026#39; app.config.globalProperties.$axios = axios 配置vue.config.js文件, 加入\ndevServer: { proxy:{ // 当我们的本地的请求 有/api的时候，就会代理我们的请求地址向另外一个服务器发出请求 // 这里的api 表示如果我们的请求地址有/api的时候,就出触发代理机制 // localhost:8888/api/abc =\u0026gt; 代理给另一个服务器 \u0026#39;/api\u0026#39;:{ // 目标路径,一般是后台服务器地址 target:\u0026#39;http://127.0.0.1:8000/\u0026#39;, // 允许跨域 changeOrigin: true, // 重写路径 pathRewrite: { // 重写路由 localhost:8888/api/login =\u0026gt; www.baidu.com/api/login \u0026#39;^/api\u0026#39;: \u0026#39;\u0026#39; // 假设我们想把 localhost:8888/api/login 变成www.baidu.com/login 就需要这么做 } } } }, ","permalink":"https://Dludora.github.io/Dludora_Blog/softwareeg/%E5%90%8E%E7%AB%AF%E8%B7%A8%E5%9F%9F/","summary":"Vue-Django解决跨域 什么是跨域 跨域本质是浏览器基于同源策略的一种安全手段\n同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能\n所谓同源（即指在同一个域）具有以下三个相同点\n协议相同（protocol） 主机相同（host） 端口相同（port） 反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域\n一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用postman请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。\n配置vue.config.js实现跨域 原理 ​\t将域名发送给本地的服务器(localhost:8080) ​\t再由本地的服务器去请求真正的服务器 ​\t因为请求是从服务器端发出的，所以就不存在跨域的问题 实现步骤 安装并引入axios 前端终端中输出 npm install axios -s安装axios\n在main.js中引入axios，在全局进行注册\nimport axios from \u0026#39;axios\u0026#39; app.config.globalProperties.$axios = axios 配置vue.config.js文件, 加入\ndevServer: { proxy:{ // 当我们的本地的请求 有/api的时候，就会代理我们的请求地址向另外一个服务器发出请求 // 这里的api 表示如果我们的请求地址有/api的时候,就出触发代理机制 // localhost:8888/api/abc =\u0026gt; 代理给另一个服务器 \u0026#39;/api\u0026#39;:{ // 目标路径,一般是后台服务器地址 target:\u0026#39;http://127.0.0.1:8000/\u0026#39;, // 允许跨域 changeOrigin: true, // 重写路径 pathRewrite: { // 重写路由 localhost:8888/api/login =\u0026gt; www.baidu.com/api/login \u0026#39;^/api\u0026#39;: \u0026#39;\u0026#39; // 假设我们想把 localhost:8888/api/login 变成www.","title":"前端跨域"},{"content":"煞笔！\n","permalink":"https://Dludora.github.io/Dludora_Blog/mysql/mysecond-post/","summary":"煞笔！","title":"Mysecond Post"},{"content":"1、前后端项目合并 后端项目 项目创建/运行 ​\t在前端项目同级命令行中打开终端，输入django-admin startproject 项目名称\n​\tcd进该目录，输入 python manage.py runserver，运行该项目，终端上出现链接\n配置数据库 ​\t找到第一次创建出的文件夹下，找到settings.py文件，找到如下代码\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: BASE_DIR / \u0026#39;db.sqlite3\u0026#39;, } } ​\t如果想要更换为自己的mysql数据库，可以参考以下设置进行更改\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.mysql\u0026#39;, \u0026#39;NAME\u0026#39;: \u0026#39;xxx\u0026#39;,\t# 数据库名称 \u0026#39;USER\u0026#39;: \u0026#39;root\u0026#39;\t# 连接数据库的用户名称 \u0026#39;PASSWORD\u0026#39;: \u0026#39;xxxx\u0026#39;\t# 用户密码 \u0026#39;HOST\u0026#39;: \u0026#39;127.0.0.1\u0026#39;\t# 访问的数据库的主机ip地址 \u0026#39;PORT\u0026#39;: \u0026#39;3306\u0026#39;\t# 默认mysql访问端口 } } 运行 python manage.py migrate\n新建应用 ​\t再次在终端上输入python manage.py startapp xxx，创建出xxx应用\n​\t找到第一次创建出的文件夹下，找到settings.py文件，找到如下代码\nINSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;backend.apps.BackendConfig\u0026#39;, ] ​\t把新建的应用添加进去,修改如下\nINSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;backend.apps.BackendConfig\u0026#39;, \u0026#39;xxx.apps.XxxConfig\u0026#39;, ] 在models.py文件中添加好自己想要的内容后，运行python manage.py makemigrations, python manage.py migrate\n超级管理员 在终端中，输入python manage.py createsuperuser后，按照提示创建超级管理员账号\n在服务端口后加/admin，即可进入超级管理员界面，如果想要在该界面管理新建出的xxx应用，则修改改应用目录下的admin.py文件\nadmin.py文件\nfrom django.contrib import admin from .models import Author # Register your models here. class AuthorAdmin(admin.ModelAdmin): list_display = [\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;, \u0026#39;email\u0026#39;] admin.site.register(Author, AuthorAdmin) models.py文件\nfrom django.db import models class Author(models.Model): # Author表项，含用户名和密码，均为字符串属性，并设置最大长度 username = models.CharField(max_length=50,primary_key=False) password = models.CharField(max_length=20) email = models.EmailField() 安装def-rest-framework 终端依次输入指令 pip install djangorestframework\npip install markdown\npip install django-filter\n配置drf settings.py文件 引入app INSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;rest_framework\u0026#39;,\t// 写在所有自定义模块之上 \u0026#39;backend.apps.BackendConfig\u0026#39;, ] 引入drf 放在DATA_BASE以下\nREST_FRAMEWORK = { \u0026#39;DEFAULT_PERMISSION_CLASSES\u0026#39;: [ \u0026#39;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly\u0026#39; ] } 实现cors跨域 命令行输入pip install django-cors-headers\n在settings.py 中的INSTALED_APPS中引入corsheaders , MIDDLEWARE中的第三位引入corsheaders.middleware.CorsMiddleware\n文件最下方加入\nCORS_ORIGIN_WHITELIST = ( \u0026#39;http://127.0.0.1:8080\u0026#39;, \u0026#39;http://localhost:8080\u0026#39;, ) CORS_ALLOW_CREDENTIALS = True # 指明在跨域访问中，后端是否支持对cookie的操作。 CORS_ALLOW_METHODS = ( \u0026#39;DELETE\u0026#39;, \u0026#39;GET\u0026#39;, \u0026#39;OPTIONS\u0026#39;, \u0026#39;PATCH\u0026#39;, \u0026#39;POST\u0026#39;, \u0026#39;PUT\u0026#39;, \u0026#39;VIEW\u0026#39;, ) CORS_ALLOW_HEADERS = ( \u0026#39;XMLHttpRequest\u0026#39;, \u0026#39;X_FILENAME\u0026#39;, \u0026#39;accept-encoding\u0026#39;, \u0026#39;authorization\u0026#39;, \u0026#39;content-type\u0026#39;, \u0026#39;dnt\u0026#39;, \u0026#39;origin\u0026#39;, \u0026#39;user-agent\u0026#39;, \u0026#39;x-csrftoken\u0026#39;, \u0026#39;x-requested-with\u0026#39;, \u0026#39;Pragma\u0026#39;, ) ","permalink":"https://Dludora.github.io/Dludora_Blog/softwareeg/myfirst-post/","summary":"1、前后端项目合并 后端项目 项目创建/运行 ​\t在前端项目同级命令行中打开终端，输入django-admin startproject 项目名称\n​\tcd进该目录，输入 python manage.py runserver，运行该项目，终端上出现链接\n配置数据库 ​\t找到第一次创建出的文件夹下，找到settings.py文件，找到如下代码\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: BASE_DIR / \u0026#39;db.sqlite3\u0026#39;, } } ​\t如果想要更换为自己的mysql数据库，可以参考以下设置进行更改\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.mysql\u0026#39;, \u0026#39;NAME\u0026#39;: \u0026#39;xxx\u0026#39;,\t# 数据库名称 \u0026#39;USER\u0026#39;: \u0026#39;root\u0026#39;\t# 连接数据库的用户名称 \u0026#39;PASSWORD\u0026#39;: \u0026#39;xxxx\u0026#39;\t# 用户密码 \u0026#39;HOST\u0026#39;: \u0026#39;127.0.0.1\u0026#39;\t# 访问的数据库的主机ip地址 \u0026#39;PORT\u0026#39;: \u0026#39;3306\u0026#39;\t# 默认mysql访问端口 } } 运行 python manage.py migrate\n新建应用 ​\t再次在终端上输入python manage.py startapp xxx，创建出xxx应用\n​\t找到第一次创建出的文件夹下，找到settings.","title":"前后端分离1"},{"content":"","permalink":"https://Dludora.github.io/Dludora_Blog/archive/","summary":"archive","title":"Archive"}]