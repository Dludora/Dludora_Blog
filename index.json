[{"content":"Vue 与 Markdown 交互 vue3 适配的 markdown编辑器 ​\t命令行输入npm i md-editor-v3安装 md-editor-v3组件\n​\t在想要引入的界面中加入如下代码，即可通过MdEditor模块进行使用markdown编辑器\nimport MdEditor from \u0026#39;md-editor-v3\u0026#39;; import \u0026#39;md-editor-v3/lib/style.css\u0026#39;; export default { components: { MdEditor, }, } 渲染markdown文件 需要提前安装的包 npm install vue-loader vue-template-compiler -D\nnpm install --save vue-markdown\nnpm install github-markdown-css\nnpm install highlight.js\n组件引入 在需要的地方引入刚才安装的组件\nimport VueMarkdown from \u0026#39;vue-markdown\u0026#39; export default { components: { VueMarkdown // 注入组件 }, data () { return { value: MarkdownData // value的值是要解析的markdown数据 }, } } 在main.js文件中引入css文件\nimport \u0026#39;github-markdown-css/github-markdown.css\u0026#39; import hljs from \u0026#39;highlight.js\u0026#39; // 如果开启了typescript 需要额外安装 npm install @types/highlight.js // 通过 import * as hljs from \u0026#39;highlight.js\u0026#39; 引入 app.directive(\u0026#39;highlight\u0026#39;, function (el) { const blocks = el.querySelectorAll(\u0026#39;pre code\u0026#39;) blocks.forEach(block =\u0026gt; { hljs.highlightBlock(block) }) }) 组件使用 \u0026lt;div class=\u0026#34;markdown-body\u0026#34;\u0026gt; \u0026lt;VueMarkdown :source=\u0026#34;value\u0026#34;\u0026gt;\u0026lt;/VueMarkdown\u0026gt; \u0026lt;/div\u0026gt; ","permalink":"https://Dludora.github.io/Dludora_Blog/softwareeg/my-second-post/","summary":"Vue 与 Markdown 交互 vue3 适配的 markdown编辑器 ​\t命令行输入npm i md-editor-v3安装 md-editor-v3组件\n​\t在想要引入的界面中加入如下代码，即可通过MdEditor模块进行使用markdown编辑器\nimport MdEditor from \u0026#39;md-editor-v3\u0026#39;; import \u0026#39;md-editor-v3/lib/style.css\u0026#39;; export default { components: { MdEditor, }, } 渲染markdown文件 需要提前安装的包 npm install vue-loader vue-template-compiler -D\nnpm install --save vue-markdown\nnpm install github-markdown-css\nnpm install highlight.js\n组件引入 在需要的地方引入刚才安装的组件\nimport VueMarkdown from \u0026#39;vue-markdown\u0026#39; export default { components: { VueMarkdown // 注入组件 }, data () { return { value: MarkdownData // value的值是要解析的markdown数据 }, } } 在main.","title":"Vue 与 Markdown 交互"},{"content":"Vue-Django解决跨域 什么是跨域 跨域本质是浏览器基于同源策略的一种安全手段\n同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能\n所谓同源（即指在同一个域）具有以下三个相同点\n协议相同（protocol） 主机相同（host） 端口相同（port） 反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域\n一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用postman请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。\n配置vue.config.js实现跨域 原理 ​\t将域名发送给本地的服务器(localhost:8080) ​\t再由本地的服务器去请求真正的服务器 ​\t因为请求是从服务器端发出的，所以就不存在跨域的问题 实现步骤 安装并引入axios 前端终端中输出 npm install axios -s安装axios\n在main.js中引入axios，在全局进行注册\nimport axios from \u0026#39;axios\u0026#39; app.config.globalProperties.$axios = axios 配置vue.config.js文件, 加入\ndevServer: { proxy:{ // 当我们的本地的请求 有/api的时候，就会代理我们的请求地址向另外一个服务器发出请求 // 这里的api 表示如果我们的请求地址有/api的时候,就出触发代理机制 // localhost:8888/api/abc =\u0026gt; 代理给另一个服务器 \u0026#39;/api\u0026#39;:{ // 目标路径,一般是后台服务器地址 target:\u0026#39;http://127.0.0.1:8000/\u0026#39;, // 允许跨域 changeOrigin: true, // 重写路径 pathRewrite: { // 重写路由 localhost:8888/api/login =\u0026gt; www.baidu.com/api/login \u0026#39;^/api\u0026#39;: \u0026#39;\u0026#39; // 假设我们想把 localhost:8888/api/login 变成www.baidu.com/login 就需要这么做 } } } }, ","permalink":"https://Dludora.github.io/Dludora_Blog/softwareeg/%E5%90%8E%E7%AB%AF%E8%B7%A8%E5%9F%9F/","summary":"Vue-Django解决跨域 什么是跨域 跨域本质是浏览器基于同源策略的一种安全手段\n同源策略（Sameoriginpolicy），是一种约定，它是浏览器最核心也最基本的安全功能\n所谓同源（即指在同一个域）具有以下三个相同点\n协议相同（protocol） 主机相同（host） 端口相同（port） 反之非同源请求，也就是协议、端口、主机其中一项不相同的时候，这时候就会产生跨域\n一定要注意跨域是浏览器的限制，你用抓包工具抓取接口数据，是可以看到接口已经把数据返回回来了，只是浏览器的限制，你获取不到数据。用postman请求接口能够请求到数据。这些再次印证了跨域是浏览器的限制。\n配置vue.config.js实现跨域 原理 ​\t将域名发送给本地的服务器(localhost:8080) ​\t再由本地的服务器去请求真正的服务器 ​\t因为请求是从服务器端发出的，所以就不存在跨域的问题 实现步骤 安装并引入axios 前端终端中输出 npm install axios -s安装axios\n在main.js中引入axios，在全局进行注册\nimport axios from \u0026#39;axios\u0026#39; app.config.globalProperties.$axios = axios 配置vue.config.js文件, 加入\ndevServer: { proxy:{ // 当我们的本地的请求 有/api的时候，就会代理我们的请求地址向另外一个服务器发出请求 // 这里的api 表示如果我们的请求地址有/api的时候,就出触发代理机制 // localhost:8888/api/abc =\u0026gt; 代理给另一个服务器 \u0026#39;/api\u0026#39;:{ // 目标路径,一般是后台服务器地址 target:\u0026#39;http://127.0.0.1:8000/\u0026#39;, // 允许跨域 changeOrigin: true, // 重写路径 pathRewrite: { // 重写路由 localhost:8888/api/login =\u0026gt; www.baidu.com/api/login \u0026#39;^/api\u0026#39;: \u0026#39;\u0026#39; // 假设我们想把 localhost:8888/api/login 变成www.","title":"前端跨域"},{"content":" ","permalink":"https://Dludora.github.io/Dludora_Blog/vue/vue_basic1/","summary":" ","title":"Vue_basic1"},{"content":"第三方库 ","permalink":"https://Dludora.github.io/Dludora_Blog/vue/animation1/","summary":"第三方库 ","title":"Animation1"},{"content":"煞笔！\n","permalink":"https://Dludora.github.io/Dludora_Blog/mysql/mysecond-post/","summary":"煞笔！","title":"Mysecond Post"},{"content":"1、前后端项目合并 后端项目 项目创建/运行 ​\t在前端项目同级命令行中打开终端，输入django-admin startproject 项目名称\n​\tcd进该目录，输入 python manage.py runserver，运行该项目，终端上出现链接\n配置数据库 ​\t找到第一次创建出的文件夹下，找到settings.py文件，找到如下代码\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: BASE_DIR / \u0026#39;db.sqlite3\u0026#39;, } } ​\t如果想要更换为自己的mysql数据库，可以参考以下设置进行更改\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.mysql\u0026#39;, \u0026#39;NAME\u0026#39;: \u0026#39;xxx\u0026#39;,\t# 数据库名称 \u0026#39;USER\u0026#39;: \u0026#39;root\u0026#39;\t# 连接数据库的用户名称 \u0026#39;PASSWORD\u0026#39;: \u0026#39;xxxx\u0026#39;\t# 用户密码 \u0026#39;HOST\u0026#39;: \u0026#39;127.0.0.1\u0026#39;\t# 访问的数据库的主机ip地址 \u0026#39;PORT\u0026#39;: \u0026#39;3306\u0026#39;\t# 默认mysql访问端口 } } 运行 python manage.py migrate\n新建应用 ​\t再次在终端上输入python manage.py startapp xxx，创建出xxx应用\n​\t找到第一次创建出的文件夹下，找到settings.py文件，找到如下代码\nINSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;backend.apps.BackendConfig\u0026#39;, ] ​\t把新建的应用添加进去,修改如下\nINSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;backend.apps.BackendConfig\u0026#39;, \u0026#39;xxx.apps.XxxConfig\u0026#39;, ] 在models.py文件中添加好自己想要的内容后，运行python manage.py makemigrations, python manage.py migrate\n超级管理员 在终端中，输入python manage.py createsuperuser后，按照提示创建超级管理员账号\n在服务端口后加/admin，即可进入超级管理员界面，如果想要在该界面管理新建出的xxx应用，则修改改应用目录下的admin.py文件\nadmin.py文件\nfrom django.contrib import admin from .models import Author # Register your models here. class AuthorAdmin(admin.ModelAdmin): list_display = [\u0026#39;username\u0026#39;, \u0026#39;password\u0026#39;, \u0026#39;email\u0026#39;] admin.site.register(Author, AuthorAdmin) models.py文件\nfrom django.db import models class Author(models.Model): # Author表项，含用户名和密码，均为字符串属性，并设置最大长度 username = models.CharField(max_length=50,primary_key=False) password = models.CharField(max_length=20) email = models.EmailField() 安装def-rest-framework 终端依次输入指令 pip install djangorestframework\npip install markdown\npip install django-filter\n配置drf settings.py文件 引入app INSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;rest_framework\u0026#39;,\t// 写在所有自定义模块之上 \u0026#39;backend.apps.BackendConfig\u0026#39;, ] 引入drf 放在DATA_BASE以下\nREST_FRAMEWORK = { \u0026#39;DEFAULT_PERMISSION_CLASSES\u0026#39;: [ \u0026#39;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly\u0026#39; ] } 实现cors跨域 命令行输入pip install django-cors-headers\n在settings.py 中的INSTALED_APPS中引入corsheaders , MIDDLEWARE中的第三位引入corsheaders.middleware.CorsMiddleware\n文件最下方加入\nCORS_ORIGIN_WHITELIST = ( \u0026#39;http://127.0.0.1:8080\u0026#39;, \u0026#39;http://localhost:8080\u0026#39;, ) CORS_ALLOW_CREDENTIALS = True # 指明在跨域访问中，后端是否支持对cookie的操作。 CORS_ALLOW_METHODS = ( \u0026#39;DELETE\u0026#39;, \u0026#39;GET\u0026#39;, \u0026#39;OPTIONS\u0026#39;, \u0026#39;PATCH\u0026#39;, \u0026#39;POST\u0026#39;, \u0026#39;PUT\u0026#39;, \u0026#39;VIEW\u0026#39;, ) CORS_ALLOW_HEADERS = ( \u0026#39;XMLHttpRequest\u0026#39;, \u0026#39;X_FILENAME\u0026#39;, \u0026#39;accept-encoding\u0026#39;, \u0026#39;authorization\u0026#39;, \u0026#39;content-type\u0026#39;, \u0026#39;dnt\u0026#39;, \u0026#39;origin\u0026#39;, \u0026#39;user-agent\u0026#39;, \u0026#39;x-csrftoken\u0026#39;, \u0026#39;x-requested-with\u0026#39;, \u0026#39;Pragma\u0026#39;, ) ","permalink":"https://Dludora.github.io/Dludora_Blog/softwareeg/myfirst-post/","summary":"1、前后端项目合并 后端项目 项目创建/运行 ​\t在前端项目同级命令行中打开终端，输入django-admin startproject 项目名称\n​\tcd进该目录，输入 python manage.py runserver，运行该项目，终端上出现链接\n配置数据库 ​\t找到第一次创建出的文件夹下，找到settings.py文件，找到如下代码\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.sqlite3\u0026#39;, \u0026#39;NAME\u0026#39;: BASE_DIR / \u0026#39;db.sqlite3\u0026#39;, } } ​\t如果想要更换为自己的mysql数据库，可以参考以下设置进行更改\nDATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.mysql\u0026#39;, \u0026#39;NAME\u0026#39;: \u0026#39;xxx\u0026#39;,\t# 数据库名称 \u0026#39;USER\u0026#39;: \u0026#39;root\u0026#39;\t# 连接数据库的用户名称 \u0026#39;PASSWORD\u0026#39;: \u0026#39;xxxx\u0026#39;\t# 用户密码 \u0026#39;HOST\u0026#39;: \u0026#39;127.0.0.1\u0026#39;\t# 访问的数据库的主机ip地址 \u0026#39;PORT\u0026#39;: \u0026#39;3306\u0026#39;\t# 默认mysql访问端口 } } 运行 python manage.py migrate\n新建应用 ​\t再次在终端上输入python manage.py startapp xxx，创建出xxx应用\n​\t找到第一次创建出的文件夹下，找到settings.","title":"前后端分离1"},{"content":"","permalink":"https://Dludora.github.io/Dludora_Blog/archive/","summary":"archive","title":"Archive"}]