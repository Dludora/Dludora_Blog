<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Javae on Dludora's Blog</title><link>https://Dludora.github.io/Dludora_Blog/java/</link><description>Recent content in Javae on Dludora's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Jun 2022 11:42:08 +0800</lastBuildDate><atom:link href="https://Dludora.github.io/Dludora_Blog/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Java IO流</title><link>https://Dludora.github.io/Dludora_Blog/java/io/</link><pubDate>Thu, 30 Jun 2022 11:42:08 +0800</pubDate><guid>https://Dludora.github.io/Dludora_Blog/java/io/</guid><description>Java IO 流 一、文件操作 1、创建文件 new File(String pathname) 根据路径构建一个File对象
new File(File parent, String child) 根据父目录文件+子路径构造
new File(String parent, String child) 根据父目录+子路径构建
创建文件对象后,执行 file.createNewFile
2、获取文件信息 file.getName()文件名字
file.getAbsolutePath()文件绝对路径
file.getParent文件父级目录
file.length()文件大小(字节)
file.exists() 文件/目录是否存在
file.isFile()是否是文件
file.isDirectory()是否是目录
3、目录操作 file.delete() 删除文件/目录
file.mkdir() 创建一级目录
file.mkdirs() 创建多级目录
二、Java IO流原理及其分类 ​ I/O是input/output的缩写，按照操作数据单位不同分为字节流，字符流。字节流操作二进制文件时更加适合，字符流操作文本文件更加适合。按照流的角色分为节点流、处理流/包装流。
​ IO流使用完毕后必须关闭!
抽象基类 字节流 字符流 输入流 InputStream Reader 输出流 OutputStream Writer 节点流是从某一个特定的数据源读写数据，如FileReader、FileWriter。处理流是包装节点流，可以消除不同节点流的实现差异，以更加方便的方法实现输入输出，使用了修饰器设计模式，不会直接与数据源相连，如BufferedReader、BufferedWriter。
1、InputStream 1.1 BufferedInputStream 缓冲字节流 1.2 FileInputStream 文件字节流 构造方法：
FIleInputStream(File file) FIleInputStream(String filePath) FIleInputStream(FileDescription fdObj) 方法</description></item></channel></rss>