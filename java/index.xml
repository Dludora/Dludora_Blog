<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Javae on Dludora's Blog</title><link>https://Dludora.github.io/Dludora_Blog/java/</link><description>Recent content in Javae on Dludora's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Jul 2022 20:29:28 +0800</lastBuildDate><atom:link href="https://Dludora.github.io/Dludora_Blog/java/index.xml" rel="self" type="application/rss+xml"/><item><title>多用户即时通信系统</title><link>https://Dludora.github.io/Dludora_Blog/java/%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 01 Jul 2022 20:29:28 +0800</pubDate><guid>https://Dludora.github.io/Dludora_Blog/java/%E5%A4%9A%E7%94%A8%E6%88%B7%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F/</guid><description/></item><item><title>Socket</title><link>https://Dludora.github.io/Dludora_Blog/java/socket/</link><pubDate>Fri, 01 Jul 2022 16:27:37 +0800</pubDate><guid>https://Dludora.github.io/Dludora_Blog/java/socket/</guid><description>网络多线程 一、网络 1、相关概念 1.1 ip地址： 概念：用于唯一标识网络中的每台计算机/主机。 查看ip地址：ipconfig ip地址的表示形式：点分十进制 xx.xx.xx.xx 每一个ip地址的组成=网络地址+主机地址，如：192.168.16.69 IPV4：4个字节，IPV6：16个字节 ![image-20220701165216171](D:\My Blog\Dludora_Blog\content\Java\image-20220701165216171.png)
1.2 域名 把ip地址映射成域名，ping 域名来获取对应ip
二、Socket 通信的两端都要有Socket，是两台机器间通信的端点 网络通信其实就是Socket间的通信 Socket允许程序把网络连接党曾一个流，数据在两个Socket之间通过IO传输。 一般主动发起通信的应用程序是客户端，等待通信请求的是服务端。 ![image-20220701171039264](D:\My Blog\Dludora_Blog\content\Java\image-20220701171039264.png)
![image-20220701171246279](D:\My Blog\Dludora_Blog\content\Java\image-20220701171246279.png)
![image-20220701202741081](D:\My Blog\Dludora_Blog\content\Java\image-20220701202741081.png)</description></item><item><title>多线程</title><link>https://Dludora.github.io/Dludora_Blog/java/thread/</link><pubDate>Thu, 30 Jun 2022 20:38:02 +0800</pubDate><guid>https://Dludora.github.io/Dludora_Blog/java/thread/</guid><description>多线程 程序：我们写的代码 进程：运行中的程序，是程序的一个执行过程 一、继承Thread类（重写 run 方法） ​ 当一个类继承了Thread类，该类就可以当作线程使用。我们会重写run方法，写上自己的业务代码。run Thread类实现了Runnable接口中的run方法。通过start方法启动线程。
​ 使用JConsole监控线程执行情况，并画出程序示意图。(命令行输入jconsole)
public class Thread01 { public static void main(String[] args) throws InterruptedException { // 创建Cat对象，可以当作线程使用 Cat cat = new Cat(); cat.start(); // 启动线程-&amp;gt;最终会执行cat的run方法 // 当main线程启动一个子线程Thread-0，主线程不会阻塞，会继续执行 System.out.println(&amp;#34;主线程继续执行&amp;#34; + Thread.currentThread().getName()); for (int i = 0; i &amp;lt; 10; i++) { System.out.println(&amp;#34;主线程 i = &amp;#34;+ i); // 让主线程休眠 Thread.sleep(1000); } } } class Cat extends Thread { int times = 0; @Override public void run() { while (true) { // 该线程每隔一秒，在控制台输出&amp;#34;喵喵，我是小猫咪&amp;#34; System.</description></item><item><title>Java IO流</title><link>https://Dludora.github.io/Dludora_Blog/java/io/</link><pubDate>Thu, 30 Jun 2022 11:42:08 +0800</pubDate><guid>https://Dludora.github.io/Dludora_Blog/java/io/</guid><description>Java IO 流 一、文件操作 1、创建文件 new File(String pathname) 根据路径构建一个File对象
new File(File parent, String child) 根据父目录文件+子路径构造
new File(String parent, String child) 根据父目录+子路径构建
创建文件对象后,执行 file.createNewFile
2、获取文件信息 file.getName()文件名字
file.getAbsolutePath()文件绝对路径
file.getParent文件父级目录
file.length()文件大小(字节)
file.exists() 文件/目录是否存在
file.isFile()是否是文件
file.isDirectory()是否是目录
3、目录操作 file.delete() 删除文件/目录
file.mkdir() 创建一级目录
file.mkdirs() 创建多级目录
二、Java IO流原理及其分类 ​ I/O是input/output的缩写，按照操作数据单位不同分为字节流，字符流。字节流操作二进制文件时更加适合，字符流操作文本文件更加适合。按照流的角色分为节点流、处理流/包装流。
​ IO流使用完毕后必须关闭!
抽象基类 字节流 字符流 输入流 InputStream Reader 输出流 OutputStream Writer 节点流是从某一个特定的数据源读写数据，如FileReader、FileWriter。处理流是包装节点流，可以消除不同节点流的实现差异，以更加方便的方法实现输入输出，使用了修饰器设计模式，不会直接与数据源相连，如BufferedReader、BufferedWriter。
1、InputStream 1.1 BufferedInputStream 缓冲字节流 1.2 FileInputStream 文件字节流 构造方法：
FIleInputStream(File file) FIleInputStream(String filePath) FIleInputStream(FileDescription fdObj) 方法</description></item></channel></rss>